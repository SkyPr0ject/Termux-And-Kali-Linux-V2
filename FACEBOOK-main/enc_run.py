import base64 
exec(base64.b64decode("#!/usr/bin/python3
#-*-coding:utf-8-*-

import sys,os,requests,json,time
from concurrent.futures import ThreadPoolExecutor as ThreadPool
from datetime import datetime

saat_ini = datetime.now()
tgl = saat_ini.strftime('%d')
bln = saat_ini.strftime('%m')
thn = saat_ini.strftime('%Y')
waktu_new = (tgl+"-"+bln+"-"+thn)
xnxx="\033[85m"
q="\033[00m"
h2="\033[40m"
b2="\033[44m"
c2="\033[46m"
i2="\033[42m"
u2="\033[45m"
m2="\033[41m"
p2="\033[47m"
k2="\033[43m"
b='\033[1;34m'
i='\033[1;32m'
c='\033[1;36m'
m='\033[1;31m'
u='\033[1;35m'
k='\033[1;33m'
p='\033[1;37m'
h='\033[1;90m'
k3="\033[43m\033[1;37m"
b3="\033[44m\033[1;37m"
m3="\033[41m\033[1;37m"

def banner():
    print(m +"""
       __  __ ____    _ ____ ____ _____
      |  \/  |  _ \  / | ___| ___|___  |
      | |\/| | |_) | | |___ \___ \  / /
  """+ p +"""    | |  | |  _ < _| |___) |__) |/ /
      |_|  |_|_| \_(_)_|____/____//_/
  _________________________________________""")

def jalan(z):
	for e in z + "\n":
		sys.stdout.write(e)
		sys.stdout.flush()
		time.sleep(0.05)

def login():
    os.system("rm -rf login.txt")
    os.system('clear')
    url = requests.get("https://api.myip.com").text
    js1 = json.loads(url)
    banner()
    print ('  Ip Kamu : {}'.format(js1["ip"]))
    toket = input("  [•] Token : ")
    try:
        otw = requests.get('https://graph.facebook.com/me?access_token=' + toket)
        a = json.loads(otw.text)
        nama = a['name']
        xd = open('login.txt', 'w')
        xd.write(toket)
        xd.close()
        print('\n[•] Login Successful')
        menu()
    except KeyError:
        print ("\n[!] Token Invalid")
        os.system('clear')
        login()

def menu():
    try:
        toket = open("login.txt","r").read()
    except KeyError:
        jalan("\n[!] Token Invalid")
        login()
    except IOError:
        jalan("\n[!] Token Invalid")
        login()
    os.system('clear')
    url = requests.get("https://api.myip.com").text
    js = json.loads(url)
    print (m +'    __  _______  ______')
    print ('   /  |/  / __ )/ ____/ | Author : Aldi bachtiar rifai')
    print ('  / /|_/ / __  / /_     | YT     : MR.1557')
    print (p +' / /  / / /_/ / __/     | Ig     : @Aldi.rifai.12')
    print ('/_/  /_/_____/_/        | sc     : Versi 1')
    print (p +'_____________________________________________________')
    print ('Ip Kamu : {}'.format(js["ip"]))
    print ('Date    : '+ waktu_new)
    print ('_____________________________________________________')
    print("[1] Get ID From Friendlist")
    print("[2] Get ID From Public")
    print("[3] Get ID From Followers")
    print("[0] Log Out")
    mn = input("\n[•] Select : ")
    if mn in [""]:
        jalan("\n[!] Fill In The Correct")
        menu()
    elif mn in ["1","01"]:
        teman()
    elif mn in ["2","02"]:
        public()
    elif mn in ["3","03"]:
        followers()
    elif mn in ["0","00"]:
        os.system("rm -rf login.txt")
        jalan("\n[!] Thanks For Using My Script")
        exit()
    else:
        jalan("\n[!] Fill In The Correct")
        menu()

def teman():
    try:
        toket = open("login.txt","r").read()
        otw = requests.get('https://graph.facebook.com/me?access_token=' + toket)
        a = json.loads(otw.text)
        print ("\n[•] Name : %s"%(a['name']))
    except KeyError:
        jalan("\n[!] Token Invalid")
        login()
    except IOError:
        jalan("\n[!] Token Invalid")
        login()
    tampung=[]
    teman=[]
    lim = input("[•] Limit Dump : ")
    print ("\n")
    ada = requests.get('https://graph.facebook.com/me/friends?limit=%s&access_token=%s'%(lim,toket))
    idi = json.loads(ada.text)
    for x in idi['data']:
        tampung.append(x['id'])
    for id in tampung:
        try:
            ada2 = requests.get('https://graph.facebook.com/%s/friends?access_token=%s'%(id,toket))
            idi2 = json.loads(ada2.text)
            try:
                for b in idi2['data']:
                    teman.append(b['id'])
            except KeyError:
            	print("[!] Private")
            print("[•]", id,"•",len(teman))
            teman.clear()
        except KeyError:
            print("[!] Akun Terkena Spam")
    kembali()

def public():
    it = input("\n[•] ID Public : ")
    try:
        toket = open("login.txt","r").read()
        otw = requests.get('https://graph.facebook.com/%s?access_token=%s'%(it,toket))
        a = json.loads(otw.text)
        print ("[•] Name : %s"%(a['name']))
    except KeyError:
        jalan("\n[!] Token Invalid")
        login()
    except IOError:
        jalan("\n[!] Token Invalid")
        login()
    tampung=[]
    teman=[]
    lim = input("[•] Limit Dump : ")
    print ("\n")
    ada = requests.get('https://graph.facebook.com/%s/friends?limit=%s&access_token=%s'%(it,lim,toket))
    idi = json.loads(ada.text)
    for x in idi['data']:
        tampung.append(x['id'])
    for id in tampung:
        try:
            ada2 = requests.get('https://graph.facebook.com/%s/friends?access_token=%s'%(id,toket))
            idi2 = json.loads(ada2.text)
            try:
                for b in idi2['data']:
                    teman.append(b['id'])
            except KeyError:
            	print("[!] Private")
            print("[•]", id,"•",len(teman))
            teman.clear()
        except KeyError:
            print("[!] Akun Terkena Spam")
    kembali()

def followers():
    it = input("\n[•] ID Followers : ")
    try:
        toket = open("login.txt","r").read()
        otw = requests.get('https://graph.facebook.com/%s?access_token=%s'%(it,toket))
        a = json.loads(otw.text)
        print ("[•] Name : %s"%(a['name']))
    except KeyError:
        jalan("\n[!] Token Invalid")
        login()
    except IOError:
        jalan("\n[!] Token Invalid")
        login()
    tampung=[]
    teman=[]
    lim = input("[•] Limit Dump : ")
    print ("\n")
    ada = requests.get('https://graph.facebook.com/%s/subscribers?limit=%s&access_token=%s'%(it,lim,toket))
    idi = json.loads(ada.text)
    for x in idi['data']:
        tampung.append(x['id'])
    for id in tampung:
        try:
            ada2 = requests.get('https://graph.facebook.com/%s/friends?access_token=%s'%(id,toket))
            idi2 = json.loads(ada2.text)
            try:
                for b in idi2['data']:
                    teman.append(b['id'])
            except KeyError:
            	print("[!] Private")
            print("[•]", id,"•",len(teman))
            teman.clear()
        except KeyError:
            print("[!] Akun Terkena Spam")
    kembali()

def kembali():
    input("\n[ Kembali ]")
    menu()

if __name__=="__main__":
	menu()
"))